/*
 * This file is generated by jOOQ.
 */
package model.generated.tables.records;


import model.generated.tables.OrdineTables;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdineRecord extends UpdatableRecordImpl<OrdineRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ORDINE.NUM_ORDINE</code>.
     */
    public void setNumOrdine(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>ORDINE.NUM_ORDINE</code>.
     */
    public Integer getNumOrdine() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>ORDINE.TAVOLO</code>.
     */
    public void setTavolo(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>ORDINE.TAVOLO</code>.
     */
    public Integer getTavolo() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>ORDINE.COUNTER_PIATTO_ORDINATO</code>.
     */
    public void setCounterPiattoOrdinato(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>ORDINE.COUNTER_PIATTO_ORDINATO</code>.
     */
    public Integer getCounterPiattoOrdinato() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OrdineTables.ORDINE.NUM_ORDINE;
    }

    @Override
    public Field<Integer> field2() {
        return OrdineTables.ORDINE.TAVOLO;
    }

    @Override
    public Field<Integer> field3() {
        return OrdineTables.ORDINE.COUNTER_PIATTO_ORDINATO;
    }

    @Override
    public Integer component1() {
        return getNumOrdine();
    }

    @Override
    public Integer component2() {
        return getTavolo();
    }

    @Override
    public Integer component3() {
        return getCounterPiattoOrdinato();
    }

    @Override
    public Integer value1() {
        return getNumOrdine();
    }

    @Override
    public Integer value2() {
        return getTavolo();
    }

    @Override
    public Integer value3() {
        return getCounterPiattoOrdinato();
    }

    @Override
    public OrdineRecord value1(Integer value) {
        setNumOrdine(value);
        return this;
    }

    @Override
    public OrdineRecord value2(Integer value) {
        setTavolo(value);
        return this;
    }

    @Override
    public OrdineRecord value3(Integer value) {
        setCounterPiattoOrdinato(value);
        return this;
    }

    @Override
    public OrdineRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdineRecord
     */
    public OrdineRecord() {
        super(OrdineTables.ORDINE);
    }

    /**
     * Create a detached, initialised OrdineRecord
     */
    public OrdineRecord(Integer numOrdine, Integer tavolo, Integer counterPiattoOrdinato) {
        super(OrdineTables.ORDINE);

        setNumOrdine(numOrdine);
        setTavolo(tavolo);
        setCounterPiattoOrdinato(counterPiattoOrdinato);
        resetChangedOnNotNull();
    }
}
