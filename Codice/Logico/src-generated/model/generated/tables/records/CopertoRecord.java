/*
 * This file is generated by jOOQ.
 */
package model.generated.tables.records;


import model.generated.tables.CopertoTables;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row1;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CopertoRecord extends TableRecordImpl<CopertoRecord> implements Record1<Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>COPERTO.PREZZO</code>.
     */
    public void setPrezzo(Double value) {
        set(0, value);
    }

    /**
     * Getter for <code>COPERTO.PREZZO</code>.
     */
    public Double getPrezzo() {
        return (Double) get(0);
    }

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row1<Double> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    @Override
    public Row1<Double> valuesRow() {
        return (Row1) super.valuesRow();
    }

    @Override
    public Field<Double> field1() {
        return CopertoTables.COPERTO.PREZZO;
    }

    @Override
    public Double component1() {
        return getPrezzo();
    }

    @Override
    public Double value1() {
        return getPrezzo();
    }

    @Override
    public CopertoRecord value1(Double value) {
        setPrezzo(value);
        return this;
    }

    @Override
    public CopertoRecord values(Double value1) {
        value1(value1);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CopertoRecord
     */
    public CopertoRecord() {
        super(CopertoTables.COPERTO);
    }

    /**
     * Create a detached, initialised CopertoRecord
     */
    public CopertoRecord(Double prezzo) {
        super(CopertoTables.COPERTO);

        setPrezzo(prezzo);
        resetChangedOnNotNull();
    }
}
