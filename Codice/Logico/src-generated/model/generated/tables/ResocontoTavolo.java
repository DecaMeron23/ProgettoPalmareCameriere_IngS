/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.ResocontoTavoloRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResocontoTavolo extends TableImpl<ResocontoTavoloRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RESOCONTO_TAVOLO</code>
     */
    public static final ResocontoTavolo RESOCONTO_TAVOLO = new ResocontoTavolo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResocontoTavoloRecord> getRecordType() {
        return ResocontoTavoloRecord.class;
    }

    /**
     * The column <code>RESOCONTO_TAVOLO.TAVOLO</code>.
     */
    public final TableField<ResocontoTavoloRecord, Integer> TAVOLO = createField(DSL.name("TAVOLO"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>RESOCONTO_TAVOLO.NUM_COPERTI</code>.
     */
    public final TableField<ResocontoTavoloRecord, Integer> NUM_COPERTI = createField(DSL.name("NUM_COPERTI"), SQLDataType.INTEGER, this, "");

    private ResocontoTavolo(Name alias, Table<ResocontoTavoloRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResocontoTavolo(Name alias, Table<ResocontoTavoloRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>RESOCONTO_TAVOLO</code> table reference
     */
    public ResocontoTavolo(String alias) {
        this(DSL.name(alias), RESOCONTO_TAVOLO);
    }

    /**
     * Create an aliased <code>RESOCONTO_TAVOLO</code> table reference
     */
    public ResocontoTavolo(Name alias) {
        this(alias, RESOCONTO_TAVOLO);
    }

    /**
     * Create a <code>RESOCONTO_TAVOLO</code> table reference
     */
    public ResocontoTavolo() {
        this(DSL.name("RESOCONTO_TAVOLO"), null);
    }

    public <O extends Record> ResocontoTavolo(Table<O> child, ForeignKey<O, ResocontoTavoloRecord> key) {
        super(child, key, RESOCONTO_TAVOLO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ResocontoTavoloRecord> getPrimaryKey() {
        return Keys.RESOCONTO_TAVOLO__PK_RESOCONTO_TAVOLO;
    }

    @Override
    public ResocontoTavolo as(String alias) {
        return new ResocontoTavolo(DSL.name(alias), this);
    }

    @Override
    public ResocontoTavolo as(Name alias) {
        return new ResocontoTavolo(alias, this);
    }

    @Override
    public ResocontoTavolo as(Table<?> alias) {
        return new ResocontoTavolo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResocontoTavolo rename(String name) {
        return new ResocontoTavolo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResocontoTavolo rename(Name name) {
        return new ResocontoTavolo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResocontoTavolo rename(Table<?> name) {
        return new ResocontoTavolo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
