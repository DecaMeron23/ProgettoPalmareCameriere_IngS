/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.tables.records.ComponenteRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Componente extends TableImpl<ComponenteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>COMPONENTE</code>
     */
    public static final Componente COMPONENTE = new Componente();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComponenteRecord> getRecordType() {
        return ComponenteRecord.class;
    }

    /**
     * The column <code>COMPONENTE.NOME</code>.
     */
    public final TableField<ComponenteRecord, Integer> NOME = createField(DSL.name("NOME"), SQLDataType.INTEGER, this, "");

    private Componente(Name alias, Table<ComponenteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Componente(Name alias, Table<ComponenteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>COMPONENTE</code> table reference
     */
    public Componente(String alias) {
        this(DSL.name(alias), COMPONENTE);
    }

    /**
     * Create an aliased <code>COMPONENTE</code> table reference
     */
    public Componente(Name alias) {
        this(alias, COMPONENTE);
    }

    /**
     * Create a <code>COMPONENTE</code> table reference
     */
    public Componente() {
        this(DSL.name("COMPONENTE"), null);
    }

    public <O extends Record> Componente(Table<O> child, ForeignKey<O, ComponenteRecord> key) {
        super(child, key, COMPONENTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Componente as(String alias) {
        return new Componente(DSL.name(alias), this);
    }

    @Override
    public Componente as(Name alias) {
        return new Componente(alias, this);
    }

    @Override
    public Componente as(Table<?> alias) {
        return new Componente(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Componente rename(String name) {
        return new Componente(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Componente rename(Name name) {
        return new Componente(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Componente rename(Table<?> name) {
        return new Componente(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
