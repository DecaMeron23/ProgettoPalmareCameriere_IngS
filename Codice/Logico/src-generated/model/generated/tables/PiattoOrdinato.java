/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.PiattoOrdinatoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PiattoOrdinato extends TableImpl<PiattoOrdinatoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PIATTO_ORDINATO</code>
     */
    public static final PiattoOrdinato PIATTO_ORDINATO = new PiattoOrdinato();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PiattoOrdinatoRecord> getRecordType() {
        return PiattoOrdinatoRecord.class;
    }

    /**
     * The column <code>PIATTO_ORDINATO.NUM_PIATTO</code>.
     */
    public final TableField<PiattoOrdinatoRecord, Integer> NUM_PIATTO = createField(DSL.name("NUM_PIATTO"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PIATTO_ORDINATO.NUM_ORDINE</code>.
     */
    public final TableField<PiattoOrdinatoRecord, Integer> NUM_ORDINE = createField(DSL.name("NUM_ORDINE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PIATTO_ORDINATO.TAVOLO</code>.
     */
    public final TableField<PiattoOrdinatoRecord, Integer> TAVOLO = createField(DSL.name("TAVOLO"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PIATTO_ORDINATO.COMMENTO</code>.
     */
    public final TableField<PiattoOrdinatoRecord, String> COMMENTO = createField(DSL.name("COMMENTO"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>PIATTO_ORDINATO.OCCORRENZE</code>.
     */
    public final TableField<PiattoOrdinatoRecord, Integer> OCCORRENZE = createField(DSL.name("OCCORRENZE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PIATTO_ORDINATO.PIATTO</code>.
     */
    public final TableField<PiattoOrdinatoRecord, String> PIATTO = createField(DSL.name("PIATTO"), SQLDataType.CLOB, this, "");

    private PiattoOrdinato(Name alias, Table<PiattoOrdinatoRecord> aliased) {
        this(alias, aliased, null);
    }

    private PiattoOrdinato(Name alias, Table<PiattoOrdinatoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PIATTO_ORDINATO</code> table reference
     */
    public PiattoOrdinato(String alias) {
        this(DSL.name(alias), PIATTO_ORDINATO);
    }

    /**
     * Create an aliased <code>PIATTO_ORDINATO</code> table reference
     */
    public PiattoOrdinato(Name alias) {
        this(alias, PIATTO_ORDINATO);
    }

    /**
     * Create a <code>PIATTO_ORDINATO</code> table reference
     */
    public PiattoOrdinato() {
        this(DSL.name("PIATTO_ORDINATO"), null);
    }

    public <O extends Record> PiattoOrdinato(Table<O> child, ForeignKey<O, PiattoOrdinatoRecord> key) {
        super(child, key, PIATTO_ORDINATO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<PiattoOrdinatoRecord> getPrimaryKey() {
        return Keys.PIATTO_ORDINATO__PK_PIATTO_ORDINATO;
    }

    @Override
    public PiattoOrdinato as(String alias) {
        return new PiattoOrdinato(DSL.name(alias), this);
    }

    @Override
    public PiattoOrdinato as(Name alias) {
        return new PiattoOrdinato(alias, this);
    }

    @Override
    public PiattoOrdinato as(Table<?> alias) {
        return new PiattoOrdinato(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PiattoOrdinato rename(String name) {
        return new PiattoOrdinato(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PiattoOrdinato rename(Name name) {
        return new PiattoOrdinato(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PiattoOrdinato rename(Table<?> name) {
        return new PiattoOrdinato(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, String, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
