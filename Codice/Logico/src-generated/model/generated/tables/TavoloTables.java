/*
 * This file is generated by jOOQ.
 */
package model.generated.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import model.generated.DefaultSchema;
import model.generated.Keys;
import model.generated.tables.records.TavoloRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TavoloTables extends TableImpl<TavoloRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TAVOLO</code>
     */
    public static final TavoloTables TAVOLO = new TavoloTables();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TavoloRecord> getRecordType() {
        return TavoloRecord.class;
    }

    /**
     * The column <code>TAVOLO.NOME</code>.
     */
    public final TableField<TavoloRecord, Integer> NOME = createField(DSL.name("NOME"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TAVOLO.POSTI_MASSIMI</code>.
     */
    public final TableField<TavoloRecord, Integer> POSTI_MASSIMI = createField(DSL.name("POSTI_MASSIMI"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TAVOLO.STATO</code>.
     */
    public final TableField<TavoloRecord, Integer> STATO = createField(DSL.name("STATO"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private TavoloTables(Name alias, Table<TavoloRecord> aliased) {
        this(alias, aliased, null);
    }

    private TavoloTables(Name alias, Table<TavoloRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TAVOLO</code> table reference
     */
    public TavoloTables(String alias) {
        this(DSL.name(alias), TAVOLO);
    }

    /**
     * Create an aliased <code>TAVOLO</code> table reference
     */
    public TavoloTables(Name alias) {
        this(alias, TAVOLO);
    }

    /**
     * Create a <code>TAVOLO</code> table reference
     */
    public TavoloTables() {
        this(DSL.name("TAVOLO"), null);
    }

    public <O extends Record> TavoloTables(Table<O> child, ForeignKey<O, TavoloRecord> key) {
        super(child, key, TAVOLO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TavoloRecord> getPrimaryKey() {
        return Keys.TAVOLO__PK_TAVOLO;
    }

    @Override
    public TavoloTables as(String alias) {
        return new TavoloTables(DSL.name(alias), this);
    }

    @Override
    public TavoloTables as(Name alias) {
        return new TavoloTables(alias, this);
    }

    @Override
    public TavoloTables as(Table<?> alias) {
        return new TavoloTables(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TavoloTables rename(String name) {
        return new TavoloTables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TavoloTables rename(Name name) {
        return new TavoloTables(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TavoloTables rename(Table<?> name) {
        return new TavoloTables(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
